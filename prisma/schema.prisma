// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  isArtist Boolean @default(true)
  phone String?
  image String?
  queue Queue? @relation(name: "Queue")
  repertiore Request[] @relation(name: "Repertiore")
  venues Venue[] @relation(name: "Venues")
  tips Tip[] @relation(name: "Tipper")
  receivedTips Tip[] @relation(name: "Recipient")
  events Event[] @relation(name: "Event")
}

model Event {
  id String @id @default(uuid())
  address String
  city String
  state String
  zip String
  pointOfContact String
  phone String
  email String
  time DateTime 
  eventNotes String?
  setList Request[] @relation(name: "Setlist")
  artist User @relation(name: "Event", fields: [artistId], references: [id])
  artistId String @unique 
}


model Tip {
  userId String
  recipientId String
  paid Boolean @default(false)
  amount String
  accepted Boolean @default(false)
  tippedAt DateTime @default(now())
  tipper User @relation(name: "Tipper", fields: [userId], references: [id], onDelete: Cascade)
  recipient User @relation(name: "Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  request Request? @relation(name: "Request", fields: [requestId], references: [id])
  requestId String @unique

  @@id([userId, recipientId])
  @@index([userId])
  @@index([recipientId])
}

model Venue {
  id String @id @default(uuid())
  artist User @relation(name: "Venues", fields: [artistId], references: [id])
  artistId String
  name String
  address String
  city String
  state String
  zip String?
}

model Queue {
  id String @id @default(uuid())
  artist User @relation(name: "Queue", fields: [userId], references: [id])
  userId String @unique
  requests Request[]
}

model Request {
  id String @id @default(uuid())
  title String
  originalArtist String?
  sungBy String?
  notes String?
  queues Queue[]
  reps User @relation(name: "Repertiore", fields: [repId], references: [id])
  repId String @unique
  tip Tip? @relation(name: "Request")
  event Event? @relation(name: "Setlist", fields: [eventId], references: [id])
  eventId String @unique 
}


